#
#
# dd=2
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#        col="orange")
#
#
# dd=3
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#        col="orange")
#
# dd=4
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=2,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=2,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=2,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=2,type="l",lty=2,
#  col="orange")
# lines(ytest,xx(ytest),lwd=2,type="l",lty=2,
#        col="orange")
# dd=4
# plot(ytest,ptrue(ytest,xtest[1],wtest[1]),lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[2],wtest[2]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,ptrue(ytest,xtest[3],wtest[3]),lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,ptrue(ytest,xtest[4],wtest[4]),lwd=1,type="l",lty=2,
#       col="green")
dd=1
xx=ecdf(y[x==xtest[dd]])
plot(ytest,cdnOR[,dd],lwd=3,type="l",lty=1,
xlab="y",ylab="Cdf",ylim=c(0,1),main="x1",cex.lab=1.3,cex.main=1.3)
lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=3,
type="l",lty=1,col="blue")
lines(ytest,cdn0[,dd],lwd=3,type="l",lty=1,
col="green")
legend(-6.5,1.1, c("True","Recursive","Prior"),lty=c(1,1,1),
col=c("Blue","Black","Green"),bty="n",cex=1.2,y.intersp=0.3)
dd=4
xx=ecdf(y[x==xtest[dd]])
plot(ytest,cdnOR[,dd],lwd=3,type="l",lty=1,
xlab="y",ylab="Cdf",ylim=c(0,1),main="x5",cex.lab=1.3,cex.main=1.3)
lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=3,
type="l",lty=1,col="blue")
lines(ytest,cdn0[,dd],lwd=3,type="l",lty=1,
col="green")
legend(-6.5,1.1, c("True","Recursive","Prior"),lty=c(1,1,1),
col=c("Blue","Black","Green"),bty="n",cex=1.2,y.intersp=0.3)
proc.time() - ptm
################################################
### Illustration Recursion Mixture on R ###########
################################################
rm(list = setdiff(ls(), lsf.str())) #this command removes evertything except functions
ptm <- proc.time()
#set problem parameter
tau=6
n=2500 #CHECK: SOMETIMES I SAMPLE MORE TO HAVE A FINER GRID
###CHECK:ACTUAL SAMPLE IS PICKED BELOW HERE
betaA=-0.5
betaB=1
sigma2A=1.3
sigma2B=1
y=rep(0,n)
pop=c(1,2,3,4)
x=sample(pop,n,replace=TRUE)
#w=1-abs(x-mean(pop))/(mean(pop))
#w=1-(1/3+x-min(x))/(2*(max(x)-min(x)))
#w=1-(1/3+x-min(x))/(1+x-min(x))
w=rep(0.5,n)
u=runif(n)
#generate y
for (i in 1:n){
if (u[i]<=w[i]){
y[i]=rnorm(1,betaA*x[i],sigma2A)  }
else{
y[i]=rnorm(1,betaB*x[i],sigma2B)
}
}
#Create the grid of point in which to evaluate the distribution (not needed I guess)
ytest=y[order(y)]
xtest=pop[order(pop)]
#wtest=1-abs(xtest-mean(xtest))/(mean(xtest))
#wtest=1-(1/3+xtest-min(xtest))/(1+xtest-min(xtest))
wtest=rep(0.5,length(xtest))
#prior
mup<-1
sigmaP<-2
cdn<-pnorm(ytest,mean=mup,sd=sqrt(sigmaP))
cdn<-matrix(rep(cdn,length(xtest)),ncol=length(xtest))
cdn0<- cdn #save the prior in order to use it for plot
size<-dim(cdn)
###### Recursive procedure ######
#simple version
fit<-recursive(y,x,n,cdn,xtest,"Gaussian")
fitG<-recursive(y,x,n,cdn,xtest,"Gaussian")
print(sum(fit$saveP))
#monte carlo
mc=1
ptm <- proc.time()
cdnMC<-matrix(0,size[1],size[2])
cdn<-cdn0
for (t in 1:mc){
perm=sample(seq(1,n,1),replace=FALSE)
y=y[perm]
x=x[perm]
fitMC<-recursive(y,x,n,cdn,xtest,"StudentT")
cdnMC<-cdnMC+fitMC$cdn
}
cdnMC<-cdnMC/mc
proc.time() - ptm
#order observation: due to the small sample
cdnOR<-matrix(0,size[1],size[2])
for (i in 1:length(xtest)){
neword<-order(abs(x-xtest[i]),decreasing=TRUE)
x0<-x[neword]
y0<-y[neword]
x1<-x0[x0!=xtest[i]]
y1<-y0[x0!=xtest[i]]
x2<-x0[x0==xtest[i]]
y2<-y0[x0==xtest[i]]
fitORinter<-recursive(y1,x1,length(x1),cdn,xtest,"StudentT")
#monte carlo
mc=10
cdnMCOR<-matrix(0,size[1],size[2])
for (t in 1:mc){
perm=sample(seq(1,length(y2),1),replace=FALSE)
y2=y2[perm]
x2=x2[perm]
fitORMC<-recursive(y2,x2,length(y2),fitORinter$cdn,xtest,"StudentT")
cdnMCOR<-cdnMCOR+fitORMC$cdn
}
cdnOR[,i]<-cdnMCOR[,i]/mc
}
######################################
######### Plot CDF ##################
##¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
par(mfrow=c(2,2))
# dd=1
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#      col="orange")
#
#
# dd=2
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#        col="orange")
#
#
# dd=3
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#        col="orange")
#
# dd=4
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=2,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=2,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=2,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=2,type="l",lty=2,
#  col="orange")
# lines(ytest,xx(ytest),lwd=2,type="l",lty=2,
#        col="orange")
# dd=4
# plot(ytest,ptrue(ytest,xtest[1],wtest[1]),lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[2],wtest[2]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,ptrue(ytest,xtest[3],wtest[3]),lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,ptrue(ytest,xtest[4],wtest[4]),lwd=1,type="l",lty=2,
#       col="green")
dd=1
xx=ecdf(y[x==xtest[dd]])
plot(ytest,cdnOR[,dd],lwd=3,type="l",lty=1,
xlab="y",ylab="Cdf",ylim=c(0,1),main="x1",cex.lab=1.3,cex.main=1.3)
lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=3,
type="l",lty=1,col="blue")
lines(ytest,cdn0[,dd],lwd=3,type="l",lty=1,
col="green")
legend(-6.5,1.1, c("True","Recursive","Prior"),lty=c(1,1,1),
col=c("Blue","Black","Green"),bty="n",cex=1.2,y.intersp=0.3)
dd=4
xx=ecdf(y[x==xtest[dd]])
plot(ytest,cdnOR[,dd],lwd=3,type="l",lty=1,
xlab="y",ylab="Cdf",ylim=c(0,1),main="x5",cex.lab=1.3,cex.main=1.3)
lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=3,
type="l",lty=1,col="blue")
lines(ytest,cdn0[,dd],lwd=3,type="l",lty=1,
col="green")
legend(-6.5,1.1, c("True","Recursive","Prior"),lty=c(1,1,1),
col=c("Blue","Black","Green"),bty="n",cex=1.2,y.intersp=0.3)
proc.time() - ptm
##########################################
######## Recursive functions for R #######
##########################################
#compute the checkloss function
checkloss<- function(q,xtest,ytest,CDN,samplemonte){
checkloss=matrix(0,length(q),length(xtest))
for (i in 1:length(pop)){
q_inv<-approx(CDN[,i], ytest, q, method = "linear", rule = 2)
for (b in 1:length(q)){
bb=as.numeric(I(samplemonte[,i]>q_inv$y[b]))
checkloss[b,i]=mean(bb*samplemonte[,i])*q_inv$y[b]
}}
return(checkloss)
}
checklossTRUE<- function(q,xtest,ytest,samplemonte){
checkloss=matrix(0,length(q),length(xtest))
for (i in 1:length(pop)){
q_inv<-  wtest[i]*qnorm(q,mean=betaA*xtest[i],sd=sqrt(sigma2A))+(1-wtest[i])*qnorm(q,mean=betaB*xtest[i],sd=sqrt(sigma2B))
for (b in 1:length(q)){
bb=as.numeric(I(samplemonte[,i]>q_inv[b]))
checkloss[b,i]=mean(bb*samplemonte[,i])*q_inv[b]
}}
return(checkloss)
}
#compute the Cramer-vonMises test statistics
CvM<-function(diff,pdf,ytest){
f=diff*pdf
CvM<-trap(f,ytest)
}
#compute the trapezoidal rule.
trap<- function(f,ytest){
diffy<-matrix(rep(ytest[2:length(ytest)]-ytest[1:length(ytest)-1],dim(f)[2]),ncol=dim(f)[2])
sumbase<-f[1:dim(f)[1]-1,]+f[2:dim(f)[1],]
prod<-diffy*sumbase/2
trap<-apply(prod,2,sum)
}
#true distribution
ptrue <- function(grid, x,wtest) {
wtest*pnorm(grid,mean=betaA*x,sd=sqrt(sigma2A))+(1-wtest)*pnorm(grid,mean=betaB*x,sd=sqrt(sigma2B))
}
#density
dtrue <- function(grid, x,wtest) {
wtest*dnorm(grid,mean=betaA*x,sd=sqrt(sigma2A))+(1-wtest)*dnorm(grid,mean=betaB*x,sd=sqrt(sigma2B))
}
#recursive procedure
recursive<-function(y,x,n,cdn,xtest,copula){
#needed input
rate=1.0001 #fix the rate of the det sequence
df=30 # degrees of freedom Student t
alpha=0.001*(1+seq(1,n,1))^(-rate)
rhoMax=0.99 #fix the max correlation picked in the procedure
dist_x=abs(matrix(rep(x,size[2]),ncol=size[2])-matrix(rep(xtest,length(x)),ncol=size[2],byrow=TRUE))
rho=rhoMax*(1-dist_x/(tau+dist_x))
#preallocate matrix
saveP<-rep(0,n)
if (identical(copula,"StudentT")){
for (i in 1:n){
cdnPrev<-cdn
if (any(is.finite(cdn))){
idx=which(x[i]==xtest)
idy=which(y[i]==ytest)
u2=cdnPrev[idy,idx]
num=qt(cdnPrev,df)-matrix(rep(qt(u2,df)*rho[i,],size[1]), ncol=size[2],byrow=TRUE)
den=matrix(rep(sqrt((df+qt(u2,df)^2)/(df+1)*(1-rho[i,]^2)),size[1]), ncol=size[2],byrow=TRUE)
partCop=pt(num/den,df)
cdn=(1-alpha[i])*cdnPrev+alpha[i]*partCop
}
else {
saveP[i]=1
}
}
} else {
for (i in 1:n){
cdnPrev<-cdn
if (any(is.finite(cdn))){
idx=which(x[i]==xtest)
idy=which(y[i]==ytest)
u2=cdnPrev[idy,idx]
num=qnorm(cdnPrev)-matrix(rep(qnorm(u2)*rho[i,],size[1]), ncol=size[2],byrow=TRUE)
den=matrix(rep(sqrt(1-rho[i,]^2),size[1]), ncol=size[2],byrow=TRUE)
partCop=pnorm(num/den)
cdn=(1-alpha[i])*cdnPrev+alpha[i]*partCop
}
else {
saveP[i]=1
}
}
}
output=list(cdn=cdn,
saveP=saveP,
rho=rho)
return(output)
}
################################################
### Illustration Recursion Mixture on R ###########
################################################
rm(list = setdiff(ls(), lsf.str())) #this command removes evertything except functions
ptm <- proc.time()
#set problem parameter
tau=6
n=2500 #CHECK: SOMETIMES I SAMPLE MORE TO HAVE A FINER GRID
###CHECK:ACTUAL SAMPLE IS PICKED BELOW HERE
betaA=-0.5
betaB=1
sigma2A=1.3
sigma2B=1
y=rep(0,n)
pop=c(1,2,3,4)
x=sample(pop,n,replace=TRUE)
#w=1-abs(x-mean(pop))/(mean(pop))
#w=1-(1/3+x-min(x))/(2*(max(x)-min(x)))
#w=1-(1/3+x-min(x))/(1+x-min(x))
w=rep(0.5,n)
u=runif(n)
#generate y
for (i in 1:n){
if (u[i]<=w[i]){
y[i]=rnorm(1,betaA*x[i],sigma2A)  }
else{
y[i]=rnorm(1,betaB*x[i],sigma2B)
}
}
#Create the grid of point in which to evaluate the distribution (not needed I guess)
ytest=y[order(y)]
xtest=pop[order(pop)]
#wtest=1-abs(xtest-mean(xtest))/(mean(xtest))
#wtest=1-(1/3+xtest-min(xtest))/(1+xtest-min(xtest))
wtest=rep(0.5,length(xtest))
#prior
mup<-1
sigmaP<-2
cdn<-pnorm(ytest,mean=mup,sd=sqrt(sigmaP))
cdn<-matrix(rep(cdn,length(xtest)),ncol=length(xtest))
cdn0<- cdn #save the prior in order to use it for plot
size<-dim(cdn)
###### Recursive procedure ######
#simple version
fit<-recursive(y,x,n,cdn,xtest,"Gaussian")
fitG<-recursive(y,x,n,cdn,xtest,"Gaussian")
print(sum(fit$saveP))
#monte carlo
mc=1
ptm <- proc.time()
cdnMC<-matrix(0,size[1],size[2])
cdn<-cdn0
for (t in 1:mc){
perm=sample(seq(1,n,1),replace=FALSE)
y=y[perm]
x=x[perm]
fitMC<-recursive(y,x,n,cdn,xtest,"StudentT")
cdnMC<-cdnMC+fitMC$cdn
}
cdnMC<-cdnMC/mc
proc.time() - ptm
#order observation: due to the small sample
cdnOR<-matrix(0,size[1],size[2])
for (i in 1:length(xtest)){
neword<-order(abs(x-xtest[i]),decreasing=TRUE)
x0<-x[neword]
y0<-y[neword]
x1<-x0[x0!=xtest[i]]
y1<-y0[x0!=xtest[i]]
x2<-x0[x0==xtest[i]]
y2<-y0[x0==xtest[i]]
fitORinter<-recursive(y1,x1,length(x1),cdn,xtest,"StudentT")
#monte carlo
mc=10
cdnMCOR<-matrix(0,size[1],size[2])
for (t in 1:mc){
perm=sample(seq(1,length(y2),1),replace=FALSE)
y2=y2[perm]
x2=x2[perm]
fitORMC<-recursive(y2,x2,length(y2),fitORinter$cdn,xtest,"StudentT")
cdnMCOR<-cdnMCOR+fitORMC$cdn
}
cdnOR[,i]<-cdnMCOR[,i]/mc
}
######################################
######### Plot CDF ##################
##¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
par(mfrow=c(2,2))
# dd=1
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#      col="orange")
#
#
# dd=2
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#        col="orange")
#
#
# dd=3
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=1,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=1,type="l",lty=2,
#        col="orange")
#
# dd=4
# xx=ecdf(y[x==xtest[dd]])
# plot(ytest,fit$cdn[,dd],lwd=2,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,cdnOR[,dd],lwd=2,type="l",lty=2,
#       col="blue")
# lines(ytest,cdnMC[,dd],lwd=2,type="l",lty=2,
#       col="green")
# lines(ytest,xx(ytest),lwd=2,type="l",lty=2,
#  col="orange")
# lines(ytest,xx(ytest),lwd=2,type="l",lty=2,
#        col="orange")
# dd=4
# plot(ytest,ptrue(ytest,xtest[1],wtest[1]),lwd=1,type="l",lty=2,
#      xlab="values",ylab="density",ylim=c(0,1))
# lines(ytest,ptrue(ytest,xtest[2],wtest[2]),lwd=2,
#       type="l",lty=1,col="red")
# lines(ytest,ptrue(ytest,xtest[3],wtest[3]),lwd=1,type="l",lty=2,
#       col="blue")
# lines(ytest,ptrue(ytest,xtest[4],wtest[4]),lwd=1,type="l",lty=2,
#       col="green")
dd=1
xx=ecdf(y[x==xtest[dd]])
plot(ytest,cdnOR[,dd],lwd=3,type="l",lty=1,
xlab="y",ylab="Cdf",ylim=c(0,1),main="x1",cex.lab=1.3,cex.main=1.3)
lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=3,
type="l",lty=1,col="blue")
lines(ytest,cdn0[,dd],lwd=3,type="l",lty=1,
col="green")
legend(-6.5,1.1, c("True","Recursive","Prior"),lty=c(1,1,1),
col=c("Blue","Black","Green"),bty="n",cex=1.2,y.intersp=0.3)
dd=4
xx=ecdf(y[x==xtest[dd]])
plot(ytest,cdnOR[,dd],lwd=3,type="l",lty=1,
xlab="y",ylab="Cdf",ylim=c(0,1),main="x5",cex.lab=1.3,cex.main=1.3)
lines(ytest,ptrue(ytest,xtest[dd],wtest[dd]),lwd=3,
type="l",lty=1,col="blue")
lines(ytest,cdn0[,dd],lwd=3,type="l",lty=1,
col="green")
legend(-6.5,1.1, c("True","Recursive","Prior"),lty=c(1,1,1),
col=c("Blue","Black","Green"),bty="n",cex=1.2,y.intersp=0.3)
proc.time() - ptm
